
import React, { useState, useEffect } from 'react';
import TaskItem from './TaskItem';
// For JSON Server, we'll simulate fetching all tasks for now:
const API_URL = "http://localhost:5000/tasks";
// This component expects to receive the ID of the current project
const TaskList = ({ projectId }) => {
    const [tasks, setTasks] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [newTaskName, setNewTaskName] = useState('');
    // Fetch tasks related to the project
    useEffect(() => {
        setIsLoading(true);
        fetch(API_URL)
  .then(res => res.json())
 .then(data => {
      setTasks(data);
     setIsLoading(false);
            })
     .catch(error => {
       console.error("Task fetch error:", error);
     setIsLoading(false);
            });
    }, [projectId]); 
    // HANDLER 1: Task Creation
    const handleAddTask = async (e) => {
        e.preventDefault();
        if (!newTaskName.trim()) return;
        const newTask = {
            projectId: projectId, // Link to the current project
            name: newTaskName.trim(),
            completed: false,
            // id is usually generated by JSON Server on POST
        };
        const res = await fetch(API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newTask)
        });
        if (res.ok) {
            const addedTask = await res.json();
            setTasks([...tasks, addedTask]); // Add new task to state
            setNewTaskName(''); // Clear input
        }
    };
    // HANDLER 2: Task Deletion
    const handleDeleteTask = async (taskId) => {
        const res = await fetch(`${API_URL}/${taskId}`, {
            method: 'DELETE',
        });

        if (res.ok) {
            setTasks(tasks.filter(task => task.id !== taskId)); // Remove from state
        }
    };
    // HANDLER 3: Task Status Toggle
    const handleToggleComplete = async (taskToUpdate) => {
        const updatedTask = { ...taskToUpdate, completed: !taskToUpdate.completed };
const res = await fetch(`${API_URL}/${taskToUpdate.id}`, {
  method: 'PUT', // or PATCH
 headers: { 'Content-Type': 'application/json' },
   body: JSON.stringify(updatedTask)
        });
if (res.ok) {
  // Update the state with the modified task
 setTasks(tasks.map(task => 
 task.id === taskToUpdate.id ? updatedTask : task
  ));
        }
    };

    if (isLoading) {
        return <p className="text-center text-gray-500 mt-4">Loading tasks...</p>;
    }
    return (
  <div className="p-6 bg-gray-50 rounded-lg shadow-inner">
  <h2 className="text-2xl font-bold mb-4 border-b pb-2">Project Tasks ({tasks.length})</h2>
  {/* Task Creation Form */}
<form onSubmit={handleAddTask} className="flex mb-6 space-x-3">
<input
 type="text"
 value={newTaskName}
onChange={(e) => setNewTaskName(e.target.value)}
 placeholder="Add a new task..."
className="flex-grow p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
  disabled={isLoading}
/>
 <button
type="submit"
className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition"
  disabled={isLoading || !newTaskName.trim()}
>
   Add Task
 </button>
 </form>
{/* Task List Rendering */} {tasks.length === 0 ? (
 <p className="text-center text-gray-600">No tasks yet. Get started!</p>
 ) : (
 <div className="space-y-3">
 {tasks.map(task => (
 <TaskItem
 key={task.id}
 task={task}
  onDelete={handleDeleteTask}
  onToggle={handleToggleComplete}
   />
   ))}
  </div>
  )}
</div>
    );
};

export default TaskList;